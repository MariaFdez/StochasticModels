ggplot(results,aes(x=margin,y=iterations))+geom_point(colour="blue")+theme_bw()
results<-as.data.frame(matrix(0,100,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.01## will change the values of the sd of each type
for(i in 1:100){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.01
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
ggplot(results,aes(x=radius,y=iterations))+geom_point(colour="blue")+theme_bw()
ggplot(results,aes(x=margin,y=iterations))+geom_point(colour="blue")+theme_bw()
results<-as.data.frame(matrix(0,100,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.05## will change the values of the sd of each type
for(i in 1:100){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.05
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
ggplot(results,aes(x=margin,y=iterations))+geom_point(colour="blue")+theme_bw()
results<-as.data.frame(matrix(0,100,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.02## will change the values of the sd of each type
for(i in 1:100){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.02
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
ggplot(results,aes(x=radius,y=iterations))+geom_line(colour="blue")+theme_bw()
results<-as.data.frame(matrix(0,100,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.01## will change the values of the sd of each type
for(i in 1:100){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.015
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
results<-as.data.frame(matrix(0,50,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.01## will change the values of the sd of each type
for(i in 1:50){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.015
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
ggplot(results,aes(x=radius,y=iterations))+geom_line(colour="blue")+theme_bw()
results<-as.data.frame(matrix(0,50,3))## will keep record of the perceptron information
colnames(results)<-c("margin","radius","iterations")
coe<-0.02## will change the values of the sd of each type
for(i in 1:50){
animalsDf<- catsAndDogs(noCats, noDogs,c(-4,-4),c(4,4),c(-0.9-coe,-1-coe),c(0.9+coe,1+coe),0,0)
a<-perceptron(x=animalsDf[c("weight","height")],y=animalsDf$Animal)
results$radius[i]<-radius(noDogs,noCats,animalsDf[1:2])
results$margin[i]<-margin(noDogs,noCats,animalsDf[1:2])
results$iterations[i]<-a$ans
coe<-coe+0.02
cat(results$radius[i])
cat(results$margin[i])
cat(results$iterations[i])
}
ggplot(results,aes(x=radius,y=iterations))+geom_line(colour="blue")+theme_bw()
q1<-ggplot(results,aes(x=radius,y=iterations))+geom_line(colour="blue")+theme_bw()
q2<-ggplot(results,aes(x=margin,y=iterations))+geom_line(colour="blue")+theme_bw()
grid.newpage() # Open a new page on grid device
pushViewport(viewport(layout = grid.layout(1, 2)))
ggplot(data = animalsDf, aes(x = height, y = weight,
colour=Animal, fill=Animal)) +
geom_point() +
xlab("Height") +
ylab("Weight") +
theme_bw(base_size = 14, base_family = "Helvetica")
ggplot(data = animalsDf, aes(x = height, y = weight,
colour=as.character(Animal), fill=Animal)) +
geom_point() +
xlab("Height") +
ylab("Weight") +
theme_bw(base_size = 14, base_family = "Helvetica")
ggplot(data = animalsDf, aes(x = height, y = weight,
colour=as.character(Animal))) +
geom_point() +
xlab("Height") +
ylab("Weight") +
theme_bw(base_size = 14, base_family = "Helvetica")
animalsDf$Animal<-as.character(animalsDf$Animal)
ggplot(data = animalsDf, aes(x = height, y = weight,
colour=Animal)) +
geom_point() +
xlab("Height") +
ylab("Weight") +
theme_bw(base_size = 14, base_family = "Helvetica")
ggplot(data = animalsDf, aes(x = height, y = weight,
colour=Animal)) +
geom_point() +
xlab("Height") +
ylab("Weight") +
theme_bw(base_size = 14, base_family = "Helvetica")+
geom_abline(intercept =-a$w[1,1]/a$w[1,2], slope=-a$w[1,3]/a$w[1,2])
setwd("~/Desktop")
library(plyr) #merge tables
library(ggplot2)
library(ggmap)
library(timeDate)
library(grid)
library(gridExtra)
##colours
data<-read.table("cans.txt",sep=" ")
data<-read.table("cans.txt",sep=" ", header=T)
data<-read.table("cans.txt",sep="\t", header=T)
data<-read.csv("cans.csv",sep=",", header=T)
View(data)
data<-read.csv("cans.csv",sep=";", header=T)
View(data)
data$x.bin+1
data$x.bin<-as.numeric(data$x.bin)
data$x.bin+1
View(data)
data<-read.table("cans.txt",sep="\t", header=T)
data<-read.csv("cans.csv",sep=";", header=T)
head(data)
data<-read.csv("cans.csv",sep=";", header=T,colClasses=c(rep("numeric",5)))
data<-read.csv("cans.csv",sep=";", header=T,colClasses=c("numeric","character","character","numeric","numeric"))
head(data)
data<-read.table("cans.txt")
View(data)
round(data$V2,4)
round(data$V2,10)
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
center <- as.numeric(c(data$V2[1],data$V3[1]))
barcelonaMap<-get_googlemap(center=center, scale =4, zoom=13, maptype=c("roadmap"),color="bw")
ggplot(data,aes(x=V2,y=V3))+geom_point()
ggplot(data,aes(x=V2,y=V3))+geom_point()+
geom_point(c("468885.1451","4200354.6723"),col="red")
depot<-c("468885.1451","4200354.6723")
ggplot(data,aes(x=V2,y=V3))+geom_point()+
geom_point(depot,aes(x=depot[1],y=depot[2]),col="red")
ggplot()+geom_point(data=data,aes(x=V2,y=V3))+
geom_point(data=depot,aes(x=depot[1],y=depot[2]),col="red")
geom_point(c(468885.1451,4200354.6723),col="red")
ggplot()+geom_point(data=data,aes(x=V2,y=V3))+
geom_point(c(468885.1451,4200354.6723),col="red")
data$type<-rep("cans",nrow(data))
?rbind
rbind(data,c(1,"468885.1451","4200354.6723",NA,NA,depot)))
rbind(data,c(1,"468885.1451","4200354.6723",NA,NA,depot))
rbind(data,c(1,"468885.1451","4200354.6723",NA,NA,"depot"))
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data$type<-as.factor(data$type)
data<-rbind(data,c(1,"468885.1451","4200354.6723",NA,NA,"depot"))
data<-rbind(data,c(1,"468885.1451","4200354.6723","NA","NA","depot"))
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$type<-rep("cans",nrow(data))
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$type<-rep("cans",nrow(data))
as.numeric(data$V2)
as.numeric(round(data$V2,4))
round(as.numeric(data$V2),4)
data<-read.table("cans.txt",colClasses=c("numeric","numeric","numeric","numeric","numeric"))
character
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
round(as.numeric(data$V2)
as.numeric(data$V2)
?as.numeric
1/4
1/3
class(data$V2)
numeric(data$V2)
as.numeric(data$V2)
as.numeric(data$V2)*100
as.numeric(data$V2)/100
as.numeric(data$V2, dec=4)
as.numeric(data$V2, decimal=4)
option(digits=4)
options(digits=4)
as.numeric(data$V2)
options(digits=10)
as.numeric(data$V2)
data$V2<-round(as.numeric(data$V2)
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
View(data)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data$type<-rep("cans",nrow(data))
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data<-rbind(data,c(1,468885.1451,4200354.6723,"N","N","depot"))
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-rep("cans",nrow(data))
data<-rbind(data,c(1,468885.1451,4200354.6723,"N","N","depot"))
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-rep("cans",nrow(data))
data<-rbind(data,c(1,468885.1451,4200354.6723,"N","N","depot"))
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$type<-rep("cans",nrow(data))
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
data<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
data$type<-rep("cans",nrow(data))
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data<-rbind(data,c(1,"464323.2597","4204134.6673","N","N","disposal"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
smallroads<-read.table("smallroads.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
smallroads<-read.table("smallroads.txt",colClasses=c("numeric","character","character","numeric","numeric"))
bigroads<-read.table("bigroads.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market<-read.table("cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market$type<-rep("market",nrow(market))
smallroads<-read.table("smallroads.txt",colClasses=c("numeric","character","character","numeric","numeric"))
smallroads$type<-rep("smallroads",nrow(smallroads))
bigroads<-read.table("bigroads.txt",colClasses=c("numeric","character","character","numeric","numeric"))
bigroads$type<-rep("bigroads",nrow(bigroads))
data<-rbind(market,smallroads,bigroads)
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data<-rbind(data,c(1,"464323.2597","4204134.6673","N","N","disposal"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()+theme_bw()
costList<-c(0.001,0.01,0.1,1,5,10,100)
data<-mm[idx[1:10],]
##-------------------------------------------------------------------------------------------------
##   Support Vector Machine
##-------------------------------------------------------------------------------------------------
##DESCRIPTION:
# this code is going to apply Support Vector Machine to the Cover Type Data
## USEFULL LINKS:
## http://topepo.github.io/caret/Support_Vector_Machines.html
## GENERAL INFO:
# SVM depends on the method we choose the Kernel function to be in. We will have to choose
# some different methods and see which one is best in this data set. Depending on the kind of
# Kernel there will be some tuning parameters
##SVM function works directly with cross validation of 10-fold.
##-------------------------------------------------------------------------------------------------
##Marias directory
setwd("~/Documents/Box Sync/Current/Machine Learning/MLcompetition")
## LIBRARIES
# Import packages and functions
##Packages that are used in this code
if (!require("caret")) install.packages("caret")
if (!require("e1071")) install.packages("e1071")
if (!require("doMC")) install.packages("doMC")
if (!require("doParallel")) install.packages("doParallel")
cl <- makeCluster(detectCores()) ## detect the cores in the machine
training_set <- read.table("Data/Kaggle_Covertype_training.csv", sep = ",", header = T)
testing_set <- read.table("Data/Kaggle_Covertype_test.csv", sep = ",", header = T)
testing_trueLabel<-read.table("Data/Kaggle_Covertype_sample.csv", sep=",",header=T)
id_testing <- testing_set$id  ## keep the id
training_set <- training_set[,-1]  ## remove the id column
testing_set  <- testing_set[,-1]
conVarianza <- apply(training_set, 2, function(x) sd(x) != 0) #keep only those that have variability
conVarianza <- names(conVarianza[conVarianza==T])
training_set <- training_set[, conVarianza]
testing_set  <- testing_set[, conVarianza[1:(length(conVarianza)-1)]]
NormData <- preProcess(training_set[,-ncol(training_set)],
method = c("center", "scale"))
mm <- data.frame(predict(NormData,training_set[,-(ncol(training_set))]),
Cover_Type = as.factor(training_set$Cover_Type)) ##labels
n<-nrow(training_set)
##preparing some data
idx <- seq(1:n)
idx <- idx[sample(1:n)]
##shuffel the data
data<-mm[idx[1:10],]
data<-mm[idx[1:100],]
set.seed(4321)
costList<-c(0.001,0.01,0.1,1,5,10,100)
registerDoParallel(cl)
results<- foreach(cost = costList)) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
results<- foreach(cost = costList) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost[1])
tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=costList[1])
costList<-c(0.001,0.01,0.1,1,5,10,100)
registerDoParallel(cl)
results<- foreach(cost = costList) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
stopCluster(cl)
results<- foreach(cost = costList,.packages=c("e1071")) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
registerDoParallel(cl)
results<- foreach(cost = costList,.packages=c("e1071")) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
results<- foreach(cost = costList,.combine=rbind,.packages=c("e1071","doMC","caret")) %dopar% {
Linear_svm<-tune(svm,Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
svm(Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
cost<-costList[1]
svm(Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
results<- foreach(cost = costList,.combine=rbind,.packages=c("e1071","doMC","caret")) %dopar% {
Linear_svm<-svm(Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
results<- foreach(cost = costList,.combine=rbind,.packages=c("e1071","doMC","caret")) %do% {
Linear_svm<-svm(Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm$best.model,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
results<- foreach(cost = costList,.combine=rbind,.packages=c("e1071","doMC","caret")) %do% {
Linear_svm<-svm(Cover_Type~., data=data, kernel="linear", scale=FALSE,
cost=cost)
Linear_ypredict<-predict(Linear_svm,testing_set) #predict labels
Linear_error<-mean(testing_trueLabel[,2]!=Linear_ypredict) #error of Linear
result <- c(cost, Linear_error)
}
View(results)
View(results)
Radial_costList<-c(0.1,1,10,100,1000)
Radial_gammaList<-c(0.5,1,2,3,4)
Radial_gammaList<-c(0.5,1,2,3,4)
Radial_costList<-rep(Radial_costList,length(Radial_gammaList))
gammaList<-c(0.5,1,2,3,4)
Radial_gammaList<-c(rep(gammaList[1],5),rep(gammaList[2],5),rep(gammaList[3],5),rep(gammaList[4],5),rep(gammaList[5],5))
setwd("~/Documents/Box Sync/Current/Stochastics/StochasticModels")
setwd("~/Documents/Box Sync/Current/Stochastics/StochasticModels")
rm(list=ls())
if (!require("ggmap")) install.packages("ggmap")
if (!require("ggplot2")) install.packages("ggplot2")
market<-read.table("Data/cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market$type<-rep("market",nrow(market))
data<-rbind(data,c(1,"468885.1451","4200354.6723","N","N","depot"))
data<-rbind(data,c(1,"468885.1451","4200354.6723",0,0,"depot"))
data<-rbind(market,c(1,"468885.1451","4200354.6723",0,0,"depot"))
data<-rbind(market,c(1,"464323.2597","4204134.6673",0,0,"disposal"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()+theme_bw()
rm(list=ls())
market<-read.table("Data/cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market$type<-rep("market",nrow(market))
data<-rbind(market,c(1,"468885.1451","4200354.6723",0,0,"depot"))
data<-rbind(market,c(1,"464323.2597","4204134.6673",0,0,"disposal"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()+theme_bw()
data<-rbind(market,c(1,"468885.1451","4200354.6723",0,0,"depot"))
data<-rbind(data,c(1,"464323.2597","4204134.6673",0,0,"disposal"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()+theme_bw()
dist(data, method =  "manhattan")
dist(data[2:3,], method =  "manhattan")
coordenates<-data[2:3,]
coordenates<-data[,2:3]
dist(coordenates, method =  "manhattan")
if (!require("TSP")) install.packages("TSP")
install.package("TSP")
install.packages("TSP")
if (!require("TSP")) install.packages("TSP")
TSP(distances, labels = NULL)
TSP(x=distances, labels = NULL)
distances<-dist(coordenates, method =  "manhattan") # compute the manhattan distances
TSP(x=distances, labels = NULL)
TSP<-TSP(x=distances, labels = NULL)
summary(TSP)
solve_TSP(x=TSP, method="nearest_insertion")
Path<-solve_TSP(x=TSP, method="nearest_insertion")
labels(Path)
if (!require("tspmeta")) install.packages("tspmeta")
install.packages("tspmeta")
if (!require("tspmeta")) install.packages("tspmeta")
labels<-labels(Path)
autoplot(object=TSP, opt_tour=Path)
autoplot(object=Path, opt_tour=labels)
labels<-labels(Path)
labels(Path)
labels<-as.numeric(labels(Path))
max(labels)
plot_path<-distances[labels,]
plot_path<-distances[,labels]
plot_path<-coordenates[,labels]
plot_path<-coordenates[labels,]
ggplot(data=data,aes(x=V2,y=V3))+geom_point()+theme_bw()
ggplot(data=data,aes(x=V2,y=V3))+geom_path()+theme_bw()
ggplot(data=data,aes(x=V2,y=V3))+geom_path(col=blue)+theme_bw()
ggplot(data=data,aes(x=V2,y=V3))+geom_path(col="blue")+theme_bw()
ggplot(data=data,aes(x=V2,y=V3))+geom_path(col="blue")+theme_bw()+geom_point(col="red",size=2)
Path<-solve_TSP(x=TSP, method="nearest_insertion",start=(length(distances)-1))
(length(distances)-1)
Path<-solve_TSP(x=TSP, method="nearest_insertion",start=(nrow(coordenates)-1))
TSP
Path<-solve_TSP(x=TSP, method="nearest_insertion",start=85)
TSP<-as.ATSP(x=distances, labels = NULL)
TSP<-as.ATSP(x=distances)
TSP<-as.ATSP(distances)
TSP
initial <-85
atsp[, initial] <- 0
atsp<-as.ATSP(distances)
initial <-85
atsp[, initial] <- 0
initial_tour <- solve_TSP(atsp, method="nn")
tour <- solve_TSP(atsp, method ="2-opt", control = list(tour = initial_tour))
initial_tour
tour
path <- cut_tour(tour, initial, exclude_cut = FALSE)
head(labels(path))
plot_path(path)
ind<-as.numeric(labels(path)) ## new order
plot_path<-coordenates[ind,] ## reorder the cans by the path chossen
ggplot(data=data,aes(x=V2,y=V3))+geom_path(col="blue")+theme_bw()+geom_point(col="red",size=2)
rm(list=ls())
options(digits=10) ## so the data is well imported
market<-read.table("Data/cans.txt",colClasses=c("numeric","character","character","numeric","numeric"))
market$type<-rep("market",nrow(market))
data<-rbind(market,c(1,"468885.1451","4200354.6723",0,0,"depot"))
data$V2<-as.numeric(data$V2)
data$V3<-as.numeric(data$V3)
data$type<-as.factor(data$type)
ggplot(data=data,aes(x=V2,y=V3,col=type))+geom_point()+theme_bw()
coordenates<-data[,2:3] ## take only the coord.
distances<-dist(coordenates, method =  "manhattan") # compute the manhattan distances
atsp<-as.ATSP(distances)
initial <-85
atsp[, initial] <- 0
initial_tour <- solve_TSP(atsp, method="nn")
tour <- solve_TSP(atsp, method ="2-opt", control = list(tour = initial_tour))
path <- cut_tour(tour, initial, exclude_cut = FALSE)
#Path<-solve_TSP(x=TSP, method="nearest_insertion",start=85)
ind<-as.numeric(labels(path)) ## new order
plot_path<-coordenates[ind,] ## reorder the cans by the path chossen
ggplot(data=data,aes(x=V2,y=V3))+geom_path(col="blue")+theme_bw()+geom_point(col="red",size=2)
